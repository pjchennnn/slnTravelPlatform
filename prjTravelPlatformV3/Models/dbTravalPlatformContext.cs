// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace prjTravelPlatformV3.Models;

public partial class dbTravalPlatformContext : DbContext
{
    public dbTravalPlatformContext(DbContextOptions<dbTravalPlatformContext> options)
        : base(options)
    {
    }

    public virtual DbSet<CouponView> CouponViews { get; set; }

    public virtual DbSet<CusCouponView> CusCouponViews { get; set; }

    public virtual DbSet<DExchangeView> DExchangeViews { get; set; }

    public virtual DbSet<FordersView> FordersViews { get; set; }

    public virtual DbSet<FscheduleView> FscheduleViews { get; set; }

    public virtual DbSet<QuestionView> QuestionViews { get; set; }

    public virtual DbSet<RCarInfoView> RCarInfoViews { get; set; }

    public virtual DbSet<RCarRentOrderDetailView> RCarRentOrderDetailViews { get; set; }

    public virtual DbSet<RCarRentOrderInfoView> RCarRentOrderInfoViews { get; set; }

    public virtual DbSet<TCcompanyInfo> TCcompanyInfos { get; set; }

    public virtual DbSet<TCouponList> TCouponLists { get; set; }

    public virtual DbSet<TCusCouponQty> TCusCouponQties { get; set; }

    public virtual DbSet<TCustomer> TCustomers { get; set; }

    public virtual DbSet<TCustomerLevel> TCustomerLevels { get; set; }

    public virtual DbSet<TCustomerTravelType> TCustomerTravelTypes { get; set; }

    public virtual DbSet<TEmployee> TEmployees { get; set; }

    public virtual DbSet<TEmployeeStaff> TEmployeeStaffs { get; set; }

    public virtual DbSet<TExchangeItem> TExchangeItems { get; set; }

    public virtual DbSet<TExchangeRecord> TExchangeRecords { get; set; }

    public virtual DbSet<TFairline> TFairlines { get; set; }

    public virtual DbSet<TFairportInfo> TFairportInfos { get; set; }

    public virtual DbSet<TFclass> TFclasses { get; set; }

    public virtual DbSet<TFflightSchedule> TFflightSchedules { get; set; }

    public virtual DbSet<TForder> TForders { get; set; }

    public virtual DbSet<TForderDetail> TForderDetails { get; set; }

    public virtual DbSet<TForderStatus> TForderStatuses { get; set; }

    public virtual DbSet<TFpayment> TFpayments { get; set; }

    public virtual DbSet<TFticketType> TFticketTypes { get; set; }

    public virtual DbSet<THcomment> THcomments { get; set; }

    public virtual DbSet<THfacility> THfacilities { get; set; }

    public virtual DbSet<THfacilityRelation> THfacilityRelations { get; set; }

    public virtual DbSet<THimage> THimages { get; set; }

    public virtual DbSet<THorder> THorders { get; set; }

    public virtual DbSet<THorderDetail> THorderDetails { get; set; }

    public virtual DbSet<THotel> THotels { get; set; }

    public virtual DbSet<THroom> THrooms { get; set; }

    public virtual DbSet<THroomFacility> THroomFacilities { get; set; }

    public virtual DbSet<THroomType> THroomTypes { get; set; }

    public virtual DbSet<THroomTypeFacilityRelation> THroomTypeFacilityRelations { get; set; }

    public virtual DbSet<THroomTypeImage> THroomTypeImages { get; set; }

    public virtual DbSet<TIlogistic> TIlogistics { get; set; }

    public virtual DbSet<TIorder> TIorders { get; set; }

    public virtual DbSet<TIorderDetail> TIorderDetails { get; set; }

    public virtual DbSet<TIorderDetailView> TIorderDetailViews { get; set; }

    public virtual DbSet<TIorderStatus> TIorderStatuses { get; set; }

    public virtual DbSet<TIorderView> TIorderViews { get; set; }

    public virtual DbSet<TIpayMethod> TIpayMethods { get; set; }

    public virtual DbSet<TIproduct> TIproducts { get; set; }

    public virtual DbSet<TIproductReview> TIproductReviews { get; set; }

    public virtual DbSet<TIproductSpec> TIproductSpecs { get; set; }

    public virtual DbSet<TIshoppingCart> TIshoppingCarts { get; set; }

    public virtual DbSet<TIsupplierLogistic> TIsupplierLogistics { get; set; }

    public virtual DbSet<TItype> TItypes { get; set; }

    public virtual DbSet<TProductType> TProductTypes { get; set; }

    public virtual DbSet<TQuestion> TQuestions { get; set; }

    public virtual DbSet<TRcarInfo> TRcarInfos { get; set; }

    public virtual DbSet<TRcarModel> TRcarModels { get; set; }

    public virtual DbSet<TRcarRentOrder> TRcarRentOrders { get; set; }

    public virtual DbSet<TRcarRentOrderDetail> TRcarRentOrderDetails { get; set; }

    public virtual DbSet<TRdriverInfo> TRdriverInfos { get; set; }

    public virtual DbSet<TRorderStatus> TRorderStatuses { get; set; }

    public virtual DbSet<TRpaymentMethod> TRpaymentMethods { get; set; }

    public virtual DbSet<TRpaymentStatus> TRpaymentStatuses { get; set; }

    public virtual DbSet<TRservicePoint> TRservicePoints { get; set; }

    public virtual DbSet<TVcountry> TVcountries { get; set; }

    public virtual DbSet<TVformPath> TVformPaths { get; set; }

    public virtual DbSet<TVlengthOfStay> TVlengthOfStays { get; set; }

    public virtual DbSet<TVorder> TVorders { get; set; }

    public virtual DbSet<TVorderStatus> TVorderStatuses { get; set; }

    public virtual DbSet<TVprocessingTime> TVprocessingTimes { get; set; }

    public virtual DbSet<TVproduct> TVproducts { get; set; }

    public virtual DbSet<TVproductFormsRequired> TVproductFormsRequireds { get; set; }

    public virtual DbSet<TVtravelerInfo> TVtravelerInfos { get; set; }

    public virtual DbSet<TVvalidityPeriod> TVvalidityPeriods { get; set; }

    public virtual DbSet<Tdestination> Tdestinations { get; set; }

    public virtual DbSet<TdestinationDetail> TdestinationDetails { get; set; }

    public virtual DbSet<TdestinationOrder> TdestinationOrders { get; set; }

    public virtual DbSet<TdestinationPhoto> TdestinationPhotos { get; set; }

    public virtual DbSet<TdestinationRemark> TdestinationRemarks { get; set; }

    public virtual DbSet<ThotelDetail> ThotelDetails { get; set; }

    public virtual DbSet<TplanRemark> TplanRemarks { get; set; }

    public virtual DbSet<TtravelArea> TtravelAreas { get; set; }

    public virtual DbSet<TtravelOrder> TtravelOrders { get; set; }

    public virtual DbSet<TtravelPlan> TtravelPlans { get; set; }

    public virtual DbSet<Ttype> Ttypes { get; set; }

    public virtual DbSet<VHotelOrderDetailView> VHotelOrderDetailViews { get; set; }

    public virtual DbSet<VHotelOrderView> VHotelOrderViews { get; set; }

    public virtual DbSet<VHotelView> VHotelViews { get; set; }

    public virtual DbSet<VRoomTypeView> VRoomTypeViews { get; set; }

    public virtual DbSet<VVorderView> VVorderViews { get; set; }

    public virtual DbSet<VVproductView> VVproductViews { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<CouponView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CouponView");

            entity.Property(e => e.使用規則).HasMaxLength(50);
            entity.Property(e => e.使用金額).HasColumnType("money");
            entity.Property(e => e.名稱).HasMaxLength(50);
            entity.Property(e => e.商品類型).HasMaxLength(50);
            entity.Property(e => e.啟用日期).HasColumnType("datetime");
            entity.Property(e => e.截止日期).HasColumnType("datetime");
            entity.Property(e => e.折扣值).HasColumnType("money");
            entity.Property(e => e.折扣碼).HasMaxLength(50);
        });

        modelBuilder.Entity<CusCouponView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CusCouponView");

            entity.Property(e => e.優惠卷名稱).HasMaxLength(50);
            entity.Property(e => e.啟用日期).HasColumnType("datetime");
            entity.Property(e => e.客戶名稱).HasMaxLength(50);
            entity.Property(e => e.截止日期).HasColumnType("datetime");
            entity.Property(e => e.折扣碼).HasMaxLength(50);
        });

        modelBuilder.Entity<DExchangeView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("dExchangeView");

            entity.Property(e => e.備註).HasMaxLength(50);
            entity.Property(e => e.商品名稱).HasMaxLength(50);
            entity.Property(e => e.商品類型).HasMaxLength(50);
            entity.Property(e => e.圖片).HasMaxLength(50);
            entity.Property(e => e.所需金額).HasColumnType("money");
        });

        modelBuilder.Entity<FordersView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("FOrdersView");

            entity.Property(e => e.付款方式).HasMaxLength(50);
            entity.Property(e => e.付款狀態).HasMaxLength(50);
            entity.Property(e => e.折扣碼).HasMaxLength(50);
            entity.Property(e => e.會員名稱).HasMaxLength(50);
            entity.Property(e => e.總金額).HasColumnType("money");
            entity.Property(e => e.訂單日期).HasMaxLength(50);
            entity.Property(e => e.訂單狀態).HasMaxLength(50);
            entity.Property(e => e.訂單編號)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<FscheduleView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("FScheduleView");

            entity.Property(e => e.出發地).HasMaxLength(50);
            entity.Property(e => e.出發時間).HasMaxLength(50);
            entity.Property(e => e.定價).HasColumnType("money");
            entity.Property(e => e.抵達時間).HasMaxLength(50);
            entity.Property(e => e.目的地).HasMaxLength(50);
            entity.Property(e => e.航班代碼).HasMaxLength(50);
            entity.Property(e => e.航空公司).HasMaxLength(50);
            entity.Property(e => e.艙等).HasMaxLength(50);
        });

        modelBuilder.Entity<QuestionView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QuestionView");

            entity.Property(e => e.主旨).HasMaxLength(300);
            entity.Property(e => e.問題類型).HasMaxLength(50);
            entity.Property(e => e.日期).HasColumnType("date");
            entity.Property(e => e.處理狀態).HasMaxLength(50);
        });

        modelBuilder.Entity<RCarInfoView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("rCarInfoView");

            entity.Property(e => e.所屬公司).HasMaxLength(50);
            entity.Property(e => e.車所在地).HasMaxLength(50);
            entity.Property(e => e.車牌號碼).HasMaxLength(50);
            entity.Property(e => e.車輛圖檔).HasMaxLength(50);
            entity.Property(e => e.車輛型號).HasMaxLength(50);
        });

        modelBuilder.Entity<RCarRentOrderDetailView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("rCarRentOrderDetailView");

            entity.Property(e => e.取車據點).HasMaxLength(50);
            entity.Property(e => e.租車費用).HasColumnType("money");
            entity.Property(e => e.訂單編號)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.起租時間).HasColumnType("datetime");
            entity.Property(e => e.車牌號碼).HasMaxLength(50);
            entity.Property(e => e.車輛型號).HasMaxLength(50);
            entity.Property(e => e.還車據點).HasMaxLength(50);
            entity.Property(e => e.還車時間).HasColumnType("datetime");
            entity.Property(e => e.駕駛姓名).HasMaxLength(50);
            entity.Property(e => e.駕駛身分證).HasMaxLength(50);
        });

        modelBuilder.Entity<RCarRentOrderInfoView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("rCarRentOrderInfoView");

            entity.Property(e => e.付款方式).HasMaxLength(50);
            entity.Property(e => e.付款狀態).HasMaxLength(50);
            entity.Property(e => e.優惠券名稱).HasMaxLength(50);
            entity.Property(e => e.會員姓名).HasMaxLength(50);
            entity.Property(e => e.訂單成立日期).HasMaxLength(50);
            entity.Property(e => e.訂單狀態).HasMaxLength(50);
            entity.Property(e => e.訂單編號)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.訂單總金額).HasColumnType("money");
        });

        modelBuilder.Entity<TCcompanyInfo>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK_廠商基本資料");

            entity.ToTable("tCCompanyInfo");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FAddress)
                .HasMaxLength(50)
                .HasColumnName("fAddress");
            entity.Property(e => e.FCertificatePath).HasColumnName("fCertificatePath");
            entity.Property(e => e.FCheckDate)
                .HasMaxLength(50)
                .HasColumnName("fCheckDate");
            entity.Property(e => e.FCity)
                .HasMaxLength(50)
                .HasColumnName("fCity");
            entity.Property(e => e.FCompanyName)
                .HasMaxLength(50)
                .HasColumnName("fCompanyName");
            entity.Property(e => e.FContactEmail)
                .HasMaxLength(50)
                .HasColumnName("fContactEmail");
            entity.Property(e => e.FContactName)
                .HasMaxLength(50)
                .HasColumnName("fContactName");
            entity.Property(e => e.FContactPhone)
                .HasMaxLength(50)
                .HasColumnName("fContactPhone");
            entity.Property(e => e.FContactPhoneCountryCode)
                .HasMaxLength(50)
                .HasColumnName("fContactPhoneCountryCode");
            entity.Property(e => e.FContactPosition)
                .HasMaxLength(50)
                .HasColumnName("fContactPosition");
            entity.Property(e => e.FContactTimeZone).HasColumnName("fContactTimeZone");
            entity.Property(e => e.FCountry)
                .HasMaxLength(50)
                .HasColumnName("fCountry");
            entity.Property(e => e.FIsChecked)
                .HasMaxLength(50)
                .HasColumnName("fIsChecked");
            entity.Property(e => e.FIsInCooperation)
                .HasMaxLength(50)
                .HasColumnName("fIsInCooperation");
            entity.Property(e => e.FLanguage)
                .HasMaxLength(50)
                .HasColumnName("fLanguage");
            entity.Property(e => e.FLogo).HasColumnName("fLogo");
            entity.Property(e => e.FNameOfPersonInCharge)
                .HasMaxLength(50)
                .HasColumnName("fNameOfPersonInCharge");
            entity.Property(e => e.FPassword)
                .HasMaxLength(50)
                .HasColumnName("fPassword");
            entity.Property(e => e.FPhone)
                .HasMaxLength(50)
                .HasColumnName("fPhone");
            entity.Property(e => e.FPhoneCountryCode)
                .HasMaxLength(50)
                .HasColumnName("fPhoneCountryCode");
            entity.Property(e => e.FPostalCode).HasColumnName("fPostalCode");
            entity.Property(e => e.FType)
                .HasMaxLength(50)
                .HasColumnName("fType");
            entity.Property(e => e.FUrl)
                .HasMaxLength(50)
                .HasColumnName("fUrl");
        });

        modelBuilder.Entity<TCouponList>(entity =>
        {
            entity.HasKey(e => e.FCouponId);

            entity.ToTable("tCouponList");

            entity.Property(e => e.FCouponId).HasColumnName("fCoupon_Id");
            entity.Property(e => e.FAmount)
                .HasColumnType("money")
                .HasColumnName("fAmount");
            entity.Property(e => e.FCouponCode)
                .HasMaxLength(50)
                .HasColumnName("fCoupon_code");
            entity.Property(e => e.FCouponName)
                .HasMaxLength(50)
                .HasColumnName("fCoupon_name");
            entity.Property(e => e.FDiscount)
                .HasColumnType("money")
                .HasColumnName("fDiscount");
            entity.Property(e => e.FEnable)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("fEnable");
            entity.Property(e => e.FEndDate)
                .HasColumnType("datetime")
                .HasColumnName("fEnd_date");
            entity.Property(e => e.FNote).HasColumnName("fNote");
            entity.Property(e => e.FProductType).HasColumnName("fProduct_type");
            entity.Property(e => e.FRule)
                .HasMaxLength(50)
                .HasColumnName("fRule");
            entity.Property(e => e.FStartDate)
                .HasColumnType("datetime")
                .HasColumnName("fStart_date");

            entity.HasOne(d => d.FProductTypeNavigation).WithMany(p => p.TCouponLists)
                .HasForeignKey(d => d.FProductType)
                .HasConstraintName("FK_tCouponList_tProductType");
        });

        modelBuilder.Entity<TCusCouponQty>(entity =>
        {
            entity.HasKey(e => e.Fid);

            entity.ToTable("tCusCouponQty");

            entity.Property(e => e.Fid).HasColumnName("fid");
            entity.Property(e => e.FCouponId).HasColumnName("fCoupon_id");
            entity.Property(e => e.FCustomerId).HasColumnName("fCustomer_id");
            entity.Property(e => e.FEndDate)
                .HasColumnType("datetime")
                .HasColumnName("fEnd_date");
            entity.Property(e => e.FStartDate)
                .HasColumnType("datetime")
                .HasColumnName("fStart_date");
            entity.Property(e => e.FUsed)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("fUsed");

            entity.HasOne(d => d.FCustomer).WithMany(p => p.TCusCouponQties)
                .HasForeignKey(d => d.FCustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tCusCouponQty_tCouponList");
        });

        modelBuilder.Entity<TCustomer>(entity =>
        {
            entity.HasKey(e => e.FCustomerId);

            entity.ToTable("tCustomer");

            entity.Property(e => e.FCustomerId).HasColumnName("fCustomerId");
            entity.Property(e => e.FAddress)
                .HasMaxLength(50)
                .HasColumnName("fAddress");
            entity.Property(e => e.FBirth)
                .HasMaxLength(50)
                .HasColumnName("fBirth");
            entity.Property(e => e.FEmail)
                .HasMaxLength(50)
                .HasColumnName("fEmail");
            entity.Property(e => e.FGender)
                .HasMaxLength(50)
                .HasColumnName("fGender");
            entity.Property(e => e.FIdentityNumber)
                .HasMaxLength(50)
                .HasColumnName("fIdentityNumber");
            entity.Property(e => e.FImagePath)
                .HasMaxLength(50)
                .HasColumnName("fImagePath");
            entity.Property(e => e.FIsCheck).HasColumnName("fIsCheck");
            entity.Property(e => e.FLevelId).HasColumnName("fLevelId");
            entity.Property(e => e.FName)
                .HasMaxLength(50)
                .HasColumnName("fName");
            entity.Property(e => e.FPassword)
                .HasMaxLength(50)
                .HasColumnName("fPassword");
            entity.Property(e => e.FPhone)
                .HasMaxLength(50)
                .HasColumnName("fPhone");
            entity.Property(e => e.FPoint).HasColumnName("fPoint");
            entity.Property(e => e.FRegisterDate)
                .HasMaxLength(50)
                .HasColumnName("fRegisterDate");

            entity.HasOne(d => d.FLevel).WithMany(p => p.TCustomers)
                .HasForeignKey(d => d.FLevelId)
                .HasConstraintName("FK_tCustomer_tCustomerLevel");
        });

        modelBuilder.Entity<TCustomerLevel>(entity =>
        {
            entity.HasKey(e => e.FLevelId);

            entity.ToTable("tCustomerLevel");

            entity.Property(e => e.FLevelId).HasColumnName("fLevelId");
            entity.Property(e => e.FLevel)
                .HasMaxLength(50)
                .HasColumnName("fLevel");
        });

        modelBuilder.Entity<TCustomerTravelType>(entity =>
        {
            entity.HasKey(e => e.FId);

            entity.ToTable("tCustomerTravelType");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FCustomerId).HasColumnName("fCustomerId");
            entity.Property(e => e.FTravelTypeId).HasColumnName("fTravelTypeId");

            entity.HasOne(d => d.FCustomer).WithMany(p => p.TCustomerTravelTypes)
                .HasForeignKey(d => d.FCustomerId)
                .HasConstraintName("FK_tCustomerTravelType_tCustomer");

            entity.HasOne(d => d.FTravelType).WithMany(p => p.TCustomerTravelTypes)
                .HasForeignKey(d => d.FTravelTypeId)
                .HasConstraintName("FK_tCustomerTravelType_TType");
        });

        modelBuilder.Entity<TEmployee>(entity =>
        {
            entity.HasKey(e => e.FEmployeeId);

            entity.ToTable("tEmployee");

            entity.Property(e => e.FEmployeeId).HasColumnName("fEmployeeId");
            entity.Property(e => e.FAccountNumber)
                .HasMaxLength(50)
                .HasColumnName("fAccountNumber");
            entity.Property(e => e.FAddress)
                .HasMaxLength(50)
                .HasColumnName("fAddress");
            entity.Property(e => e.FBirth)
                .HasMaxLength(50)
                .HasColumnName("fBirth");
            entity.Property(e => e.FEmail)
                .HasMaxLength(50)
                .HasColumnName("fEmail");
            entity.Property(e => e.FGender)
                .HasMaxLength(50)
                .HasColumnName("fGender");
            entity.Property(e => e.FIdentityNumber)
                .HasMaxLength(50)
                .HasColumnName("fIdentityNumber");
            entity.Property(e => e.FImagePath)
                .HasMaxLength(50)
                .HasColumnName("fImagePath");
            entity.Property(e => e.FName)
                .HasMaxLength(50)
                .HasColumnName("fName");
            entity.Property(e => e.FPassword)
                .HasMaxLength(50)
                .HasColumnName("fPassword");
            entity.Property(e => e.FPhone)
                .HasMaxLength(50)
                .HasColumnName("fPhone");
            entity.Property(e => e.FSalt)
                .HasMaxLength(50)
                .HasColumnName("fSalt");
            entity.Property(e => e.FStaffId).HasColumnName("fStaffId");
            entity.Property(e => e.FStatus).HasColumnName("fStatus");

            entity.HasOne(d => d.FStaff).WithMany(p => p.TEmployees)
                .HasForeignKey(d => d.FStaffId)
                .HasConstraintName("FK_tEmployee_tEmployeeStaff");
        });

        modelBuilder.Entity<TEmployeeStaff>(entity =>
        {
            entity.HasKey(e => e.FStaffId);

            entity.ToTable("tEmployeeStaff");

            entity.Property(e => e.FStaffId).HasColumnName("fStaffId");
            entity.Property(e => e.FStaff)
                .HasMaxLength(50)
                .HasColumnName("fStaff");
        });

        modelBuilder.Entity<TExchangeItem>(entity =>
        {
            entity.HasKey(e => e.FProductId).HasName("PK_fExchangeItems");

            entity.ToTable("tExchangeItems");

            entity.Property(e => e.FProductId).HasColumnName("fProduct_id");
            entity.Property(e => e.FImagePath)
                .HasMaxLength(50)
                .HasColumnName("fImage_path");
            entity.Property(e => e.FMoneyRequired)
                .HasColumnType("money")
                .HasColumnName("fMoney_Required");
            entity.Property(e => e.FName)
                .HasMaxLength(50)
                .HasColumnName("fName");
            entity.Property(e => e.FNote)
                .HasMaxLength(50)
                .HasColumnName("fNote");
            entity.Property(e => e.FPointsRequired).HasColumnName("fPoints_Required");
            entity.Property(e => e.FProductType).HasColumnName("fProduct_type");
            entity.Property(e => e.FQuantity).HasColumnName("fQuantity");

            entity.HasOne(d => d.FProductTypeNavigation).WithMany(p => p.TExchangeItems)
                .HasForeignKey(d => d.FProductType)
                .HasConstraintName("FK_tExchangeItems_tProductType");
        });

        modelBuilder.Entity<TExchangeRecord>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK_ExchangeRecords");

            entity.ToTable("tExchangeRecords");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FMemberId).HasColumnName("fMember_id");
            entity.Property(e => e.FMoneyRequire)
                .HasColumnType("money")
                .HasColumnName("fMoney_require");
            entity.Property(e => e.FPoints).HasColumnName("fPoints");
            entity.Property(e => e.FProductId).HasColumnName("fProduct_id");
            entity.Property(e => e.FQuantity).HasColumnName("fQuantity");
            entity.Property(e => e.FTransDate)
                .HasColumnType("datetime")
                .HasColumnName("fTrans_date");

            entity.HasOne(d => d.FMember).WithMany(p => p.TExchangeRecords)
                .HasForeignKey(d => d.FMemberId)
                .HasConstraintName("FK_tExchangeRecords_tCustomer");

            entity.HasOne(d => d.FProduct).WithMany(p => p.TExchangeRecords)
                .HasForeignKey(d => d.FProductId)
                .HasConstraintName("FK_tExchangeRecords_tExchangeItems");
        });

        modelBuilder.Entity<TFairline>(entity =>
        {
            entity.HasKey(e => e.FAirlineId).HasName("PK_F_AirlineInfo");

            entity.ToTable("tFAirline");

            entity.Property(e => e.FAirlineId).HasColumnName("fAirlineId");
            entity.Property(e => e.FAirlineName)
                .HasMaxLength(50)
                .HasColumnName("fAirlineName");
        });

        modelBuilder.Entity<TFairportInfo>(entity =>
        {
            entity.HasKey(e => e.FAirportId).HasName("PK_tAirportInfo");

            entity.ToTable("tFAirportInfo");

            entity.Property(e => e.FAirportId).HasColumnName("fAirportId");
            entity.Property(e => e.FAirport)
                .HasMaxLength(50)
                .HasColumnName("fAirport");
        });

        modelBuilder.Entity<TFclass>(entity =>
        {
            entity.HasKey(e => e.FClassId).HasName("PK_tClass");

            entity.ToTable("tFClass");

            entity.Property(e => e.FClassId).HasColumnName("fClassId");
            entity.Property(e => e.FClass)
                .HasMaxLength(50)
                .HasColumnName("fClass");
        });

        modelBuilder.Entity<TFflightSchedule>(entity =>
        {
            entity.HasKey(e => e.FScheduleId);

            entity.ToTable("tFFlightSchedule");

            entity.Property(e => e.FScheduleId).HasColumnName("fScheduleId");
            entity.Property(e => e.FAirlineId).HasColumnName("fAirlineId");
            entity.Property(e => e.FArrivalTime)
                .HasMaxLength(50)
                .HasColumnName("fArrivalTime");
            entity.Property(e => e.FClassId).HasColumnName("fClassId");
            entity.Property(e => e.FDepartureId).HasColumnName("fDepartureId");
            entity.Property(e => e.FDepartureTime)
                .HasMaxLength(50)
                .HasColumnName("fDepartureTime");
            entity.Property(e => e.FDestinationId).HasColumnName("fDestinationId");
            entity.Property(e => e.FFlightName)
                .HasMaxLength(50)
                .HasColumnName("fFlightName");
            entity.Property(e => e.FTicketPrice)
                .HasColumnType("money")
                .HasColumnName("fTicketPrice");

            entity.HasOne(d => d.FAirline).WithMany(p => p.TFflightSchedules)
                .HasForeignKey(d => d.FAirlineId)
                .HasConstraintName("FK_tFFlightSchedule_tCCompanyInfo");

            entity.HasOne(d => d.FClass).WithMany(p => p.TFflightSchedules)
                .HasForeignKey(d => d.FClassId)
                .HasConstraintName("FK_tFFlightSchedule_tFClass1");

            entity.HasOne(d => d.FDeparture).WithMany(p => p.TFflightScheduleFDepartures)
                .HasForeignKey(d => d.FDepartureId)
                .HasConstraintName("FK_tFFlightSchedule_tFAirportInfo");

            entity.HasOne(d => d.FDestination).WithMany(p => p.TFflightScheduleFDestinations)
                .HasForeignKey(d => d.FDestinationId)
                .HasConstraintName("FK_tFFlightSchedule_tFAirportInfo1");
        });

        modelBuilder.Entity<TForder>(entity =>
        {
            entity.HasKey(e => e.FOrderId);

            entity.ToTable("tFOrder");

            entity.Property(e => e.FOrderId)
                .HasMaxLength(50)
                .HasDefaultValueSql("([dbo].[GetOrderID_F]())")
                .HasColumnName("fOrderId");
            entity.Property(e => e.FCouponId).HasColumnName("fCouponId");
            entity.Property(e => e.FId)
                .ValueGeneratedOnAdd()
                .HasColumnName("fId");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberId");
            entity.Property(e => e.FOrderDate)
                .HasMaxLength(50)
                .HasColumnName("fOrderDate");
            entity.Property(e => e.FOrderStatusId).HasColumnName("fOrderStatusId");
            entity.Property(e => e.FPaymentId).HasColumnName("fPaymentId");
            entity.Property(e => e.FPaymentStatusId).HasColumnName("fPaymentStatusId");
            entity.Property(e => e.FTotal)
                .HasColumnType("money")
                .HasColumnName("fTotal");

            entity.HasOne(d => d.FCoupon).WithMany(p => p.TForders)
                .HasForeignKey(d => d.FCouponId)
                .HasConstraintName("FK_tFOrder_tCouponList");

            entity.HasOne(d => d.FMember).WithMany(p => p.TForders)
                .HasForeignKey(d => d.FMemberId)
                .HasConstraintName("FK_tFOrder_tCustomer");

            entity.HasOne(d => d.FOrderStatus).WithMany(p => p.TForderFOrderStatuses)
                .HasForeignKey(d => d.FOrderStatusId)
                .HasConstraintName("FK_tFOrder_tFOrderStatus");

            entity.HasOne(d => d.FPayment).WithMany(p => p.TForders)
                .HasForeignKey(d => d.FPaymentId)
                .HasConstraintName("FK_tOrder_tPayment");

            entity.HasOne(d => d.FPaymentStatus).WithMany(p => p.TForderFPaymentStatuses)
                .HasForeignKey(d => d.FPaymentStatusId)
                .HasConstraintName("FK_tFOrder_tFOrderStatus1");
        });

        modelBuilder.Entity<TForderDetail>(entity =>
        {
            entity.HasKey(e => e.FOrderDetailId).HasName("PK_tOrderDetail");

            entity.ToTable("tFOrderDetail");

            entity.Property(e => e.FOrderDetailId).HasColumnName("fOrderDetailId");
            entity.Property(e => e.FBirth)
                .HasMaxLength(50)
                .HasColumnName("fBirth");
            entity.Property(e => e.FEmail)
                .HasMaxLength(50)
                .HasColumnName("fEmail");
            entity.Property(e => e.FGender).HasColumnName("fGender");
            entity.Property(e => e.FNationalId)
                .HasMaxLength(50)
                .HasColumnName("fNationalId");
            entity.Property(e => e.FOrderId)
                .HasMaxLength(50)
                .HasColumnName("fOrderId");
            entity.Property(e => e.FPassportNum)
                .HasMaxLength(50)
                .HasColumnName("fPassportNum");
            entity.Property(e => e.FPhone)
                .HasMaxLength(50)
                .HasColumnName("fPhone");
            entity.Property(e => e.FPrice)
                .HasColumnType("money")
                .HasColumnName("fPrice");
            entity.Property(e => e.FPsgrName)
                .HasMaxLength(50)
                .HasColumnName("fPsgrName");
            entity.Property(e => e.FQrcode).HasColumnName("fQRcode");
            entity.Property(e => e.FScheduleId).HasColumnName("fScheduleId");
            entity.Property(e => e.FTicketTypeId).HasColumnName("fTicketTypeId");

            entity.HasOne(d => d.FOrder).WithMany(p => p.TForderDetails)
                .HasForeignKey(d => d.FOrderId)
                .HasConstraintName("FK_tFOrderDetail_tFOrder");

            entity.HasOne(d => d.FSchedule).WithMany(p => p.TForderDetails)
                .HasForeignKey(d => d.FScheduleId)
                .HasConstraintName("FK_tFOrderDetail_tFFlightSchedule");

            entity.HasOne(d => d.FTicketType).WithMany(p => p.TForderDetails)
                .HasForeignKey(d => d.FTicketTypeId)
                .HasConstraintName("FK_tFOrderDetail_tFTicketType");
        });

        modelBuilder.Entity<TForderStatus>(entity =>
        {
            entity.HasKey(e => e.FOrderStatusId);

            entity.ToTable("tFOrderStatus");

            entity.Property(e => e.FOrderStatusId).HasColumnName("fOrderStatusId");
            entity.Property(e => e.FOrderStatus)
                .HasMaxLength(50)
                .HasColumnName("fOrderStatus");
        });

        modelBuilder.Entity<TFpayment>(entity =>
        {
            entity.HasKey(e => e.FPaymentId).HasName("PK_tPayment");

            entity.ToTable("tFPayment");

            entity.Property(e => e.FPaymentId).HasColumnName("fPaymentId");
            entity.Property(e => e.FPayment)
                .HasMaxLength(50)
                .HasColumnName("fPayment");
        });

        modelBuilder.Entity<TFticketType>(entity =>
        {
            entity.HasKey(e => e.FTicketTypeId).HasName("PK_tTicketType");

            entity.ToTable("tFTicketType");

            entity.Property(e => e.FTicketTypeId).HasColumnName("fTicketTypeId");
            entity.Property(e => e.FTicketRate).HasColumnName("fTicketRate");
            entity.Property(e => e.FTicketType)
                .HasMaxLength(50)
                .HasColumnName("fTicketType");
        });

        modelBuilder.Entity<THcomment>(entity =>
        {
            entity.HasKey(e => e.FCommentId);

            entity.ToTable("tHComment");

            entity.Property(e => e.FCommentId).HasColumnName("fCommentId");
            entity.Property(e => e.FCommentContent)
                .HasMaxLength(50)
                .HasColumnName("fCommentContent");
            entity.Property(e => e.FCommentScore).HasColumnName("fCommentScore");
            entity.Property(e => e.FCommentTime)
                .HasMaxLength(50)
                .HasColumnName("fCommentTime");
            entity.Property(e => e.FCustomerId).HasColumnName("fCustomerId");
            entity.Property(e => e.FHotelId).HasColumnName("fHotelId");
            entity.Property(e => e.FHotelOrderId)
                .HasMaxLength(50)
                .HasColumnName("fHotelOrderId");

            entity.HasOne(d => d.FHotelOrder).WithMany(p => p.THcomments)
                .HasForeignKey(d => d.FHotelOrderId)
                .HasConstraintName("FK_tHComment_tHOrder");
        });

        modelBuilder.Entity<THfacility>(entity =>
        {
            entity.HasKey(e => e.FHotelFacilityId);

            entity.ToTable("tHFacility");

            entity.Property(e => e.FHotelFacilityId).HasColumnName("fHotelFacilityId");
            entity.Property(e => e.FHotelFacilityName)
                .HasMaxLength(50)
                .HasColumnName("fHotelFacilityName");
        });

        modelBuilder.Entity<THfacilityRelation>(entity =>
        {
            entity.HasKey(e => e.FSid);

            entity.ToTable("tHFacilityRelation");

            entity.Property(e => e.FSid).HasColumnName("fSId");
            entity.Property(e => e.FHotelFacilityId).HasColumnName("fHotelFacilityId");
            entity.Property(e => e.FHotelId).HasColumnName("fHotelId");

            entity.HasOne(d => d.FHotelFacility).WithMany(p => p.THfacilityRelations)
                .HasForeignKey(d => d.FHotelFacilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tHFacilityRelation_tHFacility");

            entity.HasOne(d => d.FHotel).WithMany(p => p.THfacilityRelations)
                .HasForeignKey(d => d.FHotelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tHFacilityRelation_tHotel");
        });

        modelBuilder.Entity<THimage>(entity =>
        {
            entity.HasKey(e => e.FHotelImgId);

            entity.ToTable("tHImage");

            entity.Property(e => e.FHotelImgId).HasColumnName("fHotelImgId");
            entity.Property(e => e.FHotelId).HasColumnName("fHotelId");
            entity.Property(e => e.FHotelImage)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("fHotelImage");

            entity.HasOne(d => d.FHotel).WithMany(p => p.THimages)
                .HasForeignKey(d => d.FHotelId)
                .HasConstraintName("FK_tHImage_tHotel");
        });

        modelBuilder.Entity<THorder>(entity =>
        {
            entity.HasKey(e => e.FHotelOrderId);

            entity.ToTable("tHOrder");

            entity.Property(e => e.FHotelOrderId)
                .HasMaxLength(50)
                .HasDefaultValueSql("([dbo].[GetOrderID_H]())")
                .HasColumnName("fHotelOrderId");
            entity.Property(e => e.FCheckInDate)
                .HasMaxLength(50)
                .HasColumnName("fCheckInDate");
            entity.Property(e => e.FCheckOutDate)
                .HasMaxLength(50)
                .HasColumnName("fCheckOutDate");
            entity.Property(e => e.FCouponId).HasColumnName("fCouponId");
            entity.Property(e => e.FCustomerId).HasColumnName("fCustomerId");
            entity.Property(e => e.FGuestCount).HasColumnName("fGuestCount");
            entity.Property(e => e.FHotelId).HasColumnName("fHotelId");
            entity.Property(e => e.FOrderDate)
                .HasMaxLength(50)
                .HasColumnName("fOrderDate");
            entity.Property(e => e.FOriginalUnitPrice)
                .HasColumnType("money")
                .HasColumnName("fOriginalUnitPrice");
            entity.Property(e => e.FPayDate)
                .HasMaxLength(50)
                .HasColumnName("fPayDate");
            entity.Property(e => e.FPaymentId).HasColumnName("fPaymentId");
            entity.Property(e => e.FPaymentStatusId).HasColumnName("fPaymentStatusId");
            entity.Property(e => e.FQuantity).HasColumnName("fQuantity");
            entity.Property(e => e.FRoomCount).HasColumnName("fRoomCount");
            entity.Property(e => e.FRoomTypeId).HasColumnName("fRoomTypeId");
            entity.Property(e => e.FTotalPrice)
                .HasColumnType("money")
                .HasColumnName("fTotalPrice");

            entity.HasOne(d => d.FCoupon).WithMany(p => p.THorders)
                .HasForeignKey(d => d.FCouponId)
                .HasConstraintName("FK_tHOrder_tCouponList");

            entity.HasOne(d => d.FCustomer).WithMany(p => p.THorders)
                .HasForeignKey(d => d.FCustomerId)
                .HasConstraintName("FK_tHOrder_tCustomer");

            entity.HasOne(d => d.FHotel).WithMany(p => p.THorders)
                .HasForeignKey(d => d.FHotelId)
                .HasConstraintName("FK_tHOrder_tHotel");

            entity.HasOne(d => d.FPayment).WithMany(p => p.THorders)
                .HasForeignKey(d => d.FPaymentId)
                .HasConstraintName("FK_tHOrder_tRPaymentMethod");

            entity.HasOne(d => d.FPaymentStatus).WithMany(p => p.THorders)
                .HasForeignKey(d => d.FPaymentStatusId)
                .HasConstraintName("FK_tHOrder_tRPaymentStatus");

            entity.HasOne(d => d.FRoomType).WithMany(p => p.THorders)
                .HasForeignKey(d => d.FRoomTypeId)
                .HasConstraintName("FK_tHOrder_tHRoomType");
        });

        modelBuilder.Entity<THorderDetail>(entity =>
        {
            entity.HasKey(e => e.FHotelOrderDetailId).HasName("PK_tHOrderDetails_1");

            entity.ToTable("tHOrderDetails");

            entity.Property(e => e.FHotelOrderDetailId).HasColumnName("fHotelOrderDetailId");
            entity.Property(e => e.FHotelOrderId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fHotelOrderId");
            entity.Property(e => e.FRoomId).HasColumnName("fRoomId");

            entity.HasOne(d => d.FHotelOrder).WithMany(p => p.THorderDetails)
                .HasForeignKey(d => d.FHotelOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tHOrderDetails_tHOrder");

            entity.HasOne(d => d.FRoom).WithMany(p => p.THorderDetails)
                .HasForeignKey(d => d.FRoomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tHOrderDetails_tHRoom");
        });

        modelBuilder.Entity<THotel>(entity =>
        {
            entity.HasKey(e => e.FHotelId);

            entity.ToTable("tHotel");

            entity.Property(e => e.FHotelId).HasColumnName("fHotelId");
            entity.Property(e => e.FHotelAddress)
                .HasMaxLength(50)
                .HasColumnName("fHotelAddress");
            entity.Property(e => e.FHotelEngName)
                .HasMaxLength(50)
                .HasColumnName("fHotelEngName");
            entity.Property(e => e.FHotelName)
                .HasMaxLength(50)
                .HasColumnName("fHotelName");
            entity.Property(e => e.FPhone)
                .HasMaxLength(50)
                .HasColumnName("fPhone");
            entity.Property(e => e.FRegion)
                .HasMaxLength(50)
                .HasColumnName("fRegion");
            entity.Property(e => e.FTexId)
                .HasMaxLength(50)
                .HasColumnName("fTexId");
            entity.Property(e => e.FViewsNum)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("fViewsNum");
        });

        modelBuilder.Entity<THroom>(entity =>
        {
            entity.HasKey(e => e.FRoomId);

            entity.ToTable("tHRoom");

            entity.Property(e => e.FRoomId).HasColumnName("fRoomId");
            entity.Property(e => e.FHotelId).HasColumnName("fHotelId");
            entity.Property(e => e.FRoomNumber)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fRoomNumber");
            entity.Property(e => e.FRoomStatus).HasColumnName("fRoomStatus");
            entity.Property(e => e.FRoomTypeId).HasColumnName("fRoomTypeId");

            entity.HasOne(d => d.FHotel).WithMany(p => p.THrooms)
                .HasForeignKey(d => d.FHotelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tHRoom_tHotel");

            entity.HasOne(d => d.FRoomType).WithMany(p => p.THrooms)
                .HasForeignKey(d => d.FRoomTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tHRoom_tHRoomType");
        });

        modelBuilder.Entity<THroomFacility>(entity =>
        {
            entity.HasKey(e => e.FRoomTypeFacilityId);

            entity.ToTable("tHRoomFacility");

            entity.Property(e => e.FRoomTypeFacilityId).HasColumnName("fRoomTypeFacilityID");
            entity.Property(e => e.FRoomTypeFacilityName)
                .HasMaxLength(50)
                .HasColumnName("fRoomTypeFacilityName");
        });

        modelBuilder.Entity<THroomType>(entity =>
        {
            entity.HasKey(e => e.FRoomTypeId);

            entity.ToTable("tHRoomType");

            entity.Property(e => e.FRoomTypeId).HasColumnName("fRoomTypeId");
            entity.Property(e => e.FBedNum).HasColumnName("fBedNum");
            entity.Property(e => e.FBedType)
                .HasMaxLength(50)
                .HasColumnName("fBedType");
            entity.Property(e => e.FHotelId).HasColumnName("fHotelId");
            entity.Property(e => e.FMaxCapacity).HasColumnName("fMaxCapacity");
            entity.Property(e => e.FPrice)
                .HasColumnType("money")
                .HasColumnName("fPrice");
            entity.Property(e => e.FRoomTypeName)
                .HasMaxLength(50)
                .HasColumnName("fRoomTypeName");

            entity.HasOne(d => d.FHotel).WithMany(p => p.THroomTypes)
                .HasForeignKey(d => d.FHotelId)
                .HasConstraintName("FK_tHRoomType_tHotel");
        });

        modelBuilder.Entity<THroomTypeFacilityRelation>(entity =>
        {
            entity.HasKey(e => e.FSid);

            entity.ToTable("tHRoomTypeFacilityRelation");

            entity.Property(e => e.FSid).HasColumnName("fSId");
            entity.Property(e => e.FRoomTypeFacilityId).HasColumnName("fRoomTypeFacilityID");
            entity.Property(e => e.FRoomTypeId).HasColumnName("fRoomTypeId");

            entity.HasOne(d => d.FRoomTypeFacility).WithMany(p => p.THroomTypeFacilityRelations)
                .HasForeignKey(d => d.FRoomTypeFacilityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tHRoomTypeFacilityRelation_tHRoomFacility");

            entity.HasOne(d => d.FRoomType).WithMany(p => p.THroomTypeFacilityRelations)
                .HasForeignKey(d => d.FRoomTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tHRoomTypeFacilityRelation_tHRoomType");
        });

        modelBuilder.Entity<THroomTypeImage>(entity =>
        {
            entity.HasKey(e => e.FRoomTypeImgId);

            entity.ToTable("tHRoomTypeImage");

            entity.Property(e => e.FRoomTypeImgId)
                .ValueGeneratedNever()
                .HasColumnName("fRoomTypeImgId");
            entity.Property(e => e.FRoomImage)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("fRoomImage");
            entity.Property(e => e.FRoomTypeId).HasColumnName("fRoomTypeId");

            entity.HasOne(d => d.FRoomType).WithMany(p => p.THroomTypeImages)
                .HasForeignKey(d => d.FRoomTypeId)
                .HasConstraintName("FK_tHRoomTypeImage_tHRoomType");
        });

        modelBuilder.Entity<TIlogistic>(entity =>
        {
            entity.HasKey(e => e.FLogisticsId).HasName("PK_tILogistics_1");

            entity.ToTable("tILogistics");

            entity.Property(e => e.FLogisticsId).HasColumnName("fLogisticsId");
            entity.Property(e => e.FLogisticsName)
                .HasMaxLength(50)
                .HasColumnName("fLogisticsName");
            entity.Property(e => e.FShipFee)
                .HasColumnType("money")
                .HasColumnName("fShipFee");
        });

        modelBuilder.Entity<TIorder>(entity =>
        {
            entity.HasKey(e => e.FOrderId);

            entity.ToTable("tIOrder");

            entity.Property(e => e.FOrderId)
                .HasMaxLength(50)
                .HasDefaultValueSql("([dbo].[GetOrderID]())")
                .HasColumnName("fOrderID");
            entity.Property(e => e.FCoupponId).HasColumnName("fCoupponId");
            entity.Property(e => e.FId)
                .ValueGeneratedOnAdd()
                .HasColumnName("fId");
            entity.Property(e => e.FLastModified)
                .HasMaxLength(50)
                .HasColumnName("fLastModified");
            entity.Property(e => e.FLogisticsId).HasColumnName("fLogisticsId");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberID");
            entity.Property(e => e.FNotes)
                .HasMaxLength(50)
                .HasColumnName("fNotes");
            entity.Property(e => e.FOrderDate)
                .HasMaxLength(50)
                .HasColumnName("fOrderDate");
            entity.Property(e => e.FPayId).HasColumnName("fPayId");
            entity.Property(e => e.FReviewed).HasColumnName("fReviewed");
            entity.Property(e => e.FShipAddress)
                .HasMaxLength(50)
                .HasColumnName("fShipAddress");
            entity.Property(e => e.FShipName)
                .HasMaxLength(50)
                .HasColumnName("fShipName");
            entity.Property(e => e.FShipPhone)
                .HasMaxLength(50)
                .HasColumnName("fShipPhone");
            entity.Property(e => e.FStatusId).HasColumnName("fStatusId");

            entity.HasOne(d => d.FCouppon).WithMany(p => p.TIorders)
                .HasForeignKey(d => d.FCoupponId)
                .HasConstraintName("FK_tIOrder_tCouponList");

            entity.HasOne(d => d.FLogistics).WithMany(p => p.TIorders)
                .HasForeignKey(d => d.FLogisticsId)
                .HasConstraintName("FK_tIOrder_tILogistics");

            entity.HasOne(d => d.FMember).WithMany(p => p.TIorders)
                .HasForeignKey(d => d.FMemberId)
                .HasConstraintName("FK_tIOrder_tCustomer");

            entity.HasOne(d => d.FPay).WithMany(p => p.TIorders)
                .HasForeignKey(d => d.FPayId)
                .HasConstraintName("FK_tIOrder_tIPayMethod");

            entity.HasOne(d => d.FStatus).WithMany(p => p.TIorders)
                .HasForeignKey(d => d.FStatusId)
                .HasConstraintName("FK_tIOrder_tIOrderStatus");
        });

        modelBuilder.Entity<TIorderDetail>(entity =>
        {
            entity.HasKey(e => e.FId);

            entity.ToTable("tIOrderDetails");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FOrderId)
                .HasMaxLength(50)
                .HasColumnName("fOrderID");
            entity.Property(e => e.FQty).HasColumnName("fQty");
            entity.Property(e => e.FSpecId).HasColumnName("fSpecId");
            entity.Property(e => e.FSubtotal)
                .HasColumnType("money")
                .HasColumnName("fSubtotal");

            entity.HasOne(d => d.FOrder).WithMany(p => p.TIorderDetails)
                .HasForeignKey(d => d.FOrderId)
                .HasConstraintName("FK_tIOrderDetails_tIOrder");

            entity.HasOne(d => d.FSpec).WithMany(p => p.TIorderDetails)
                .HasForeignKey(d => d.FSpecId)
                .HasConstraintName("FK_tIOrderDetails_tIProductSpec1");
        });

        modelBuilder.Entity<TIorderDetailView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tIOrderDetail_View");

            entity.Property(e => e.小計).HasColumnType("money");
            entity.Property(e => e.產品名稱).HasMaxLength(50);
            entity.Property(e => e.規格名稱).HasMaxLength(50);
            entity.Property(e => e.訂單編號)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TIorderStatus>(entity =>
        {
            entity.HasKey(e => e.FStatusId);

            entity.ToTable("tIOrderStatus");

            entity.Property(e => e.FStatusId).HasColumnName("fStatusId");
            entity.Property(e => e.FStatus)
                .HasMaxLength(50)
                .HasColumnName("fStatus");
        });

        modelBuilder.Entity<TIorderView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tIOrder_View");

            entity.Property(e => e.付款方式).HasMaxLength(50);
            entity.Property(e => e.優惠券名稱)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.廠商名稱)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.收件人姓名).HasMaxLength(50);
            entity.Property(e => e.收件人電話).HasMaxLength(50);
            entity.Property(e => e.收件地址).HasMaxLength(50);
            entity.Property(e => e.會員名稱).HasMaxLength(50);
            entity.Property(e => e.訂單備註).HasMaxLength(50);
            entity.Property(e => e.訂單成立日期).HasMaxLength(50);
            entity.Property(e => e.訂單狀態).HasMaxLength(50);
            entity.Property(e => e.訂單編號)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.訂單總金額).HasColumnType("money");
            entity.Property(e => e.運送方式).HasMaxLength(50);
        });

        modelBuilder.Entity<TIpayMethod>(entity =>
        {
            entity.HasKey(e => e.FPayId);

            entity.ToTable("tIPayMethod");

            entity.Property(e => e.FPayId).HasColumnName("fPayId");
            entity.Property(e => e.FPayment)
                .HasMaxLength(50)
                .HasColumnName("fPayment");
        });

        modelBuilder.Entity<TIproduct>(entity =>
        {
            entity.HasKey(e => e.FProductId);

            entity.ToTable("tIProducts");

            entity.Property(e => e.FProductId).HasColumnName("fProductId");
            entity.Property(e => e.FImagePath)
                .HasMaxLength(50)
                .HasColumnName("fImagePath");
            entity.Property(e => e.FProSource).HasColumnName("fProSource");
            entity.Property(e => e.FProStatus).HasColumnName("fProStatus");
            entity.Property(e => e.FProductName)
                .HasMaxLength(50)
                .HasColumnName("fProductName");
            entity.Property(e => e.FRelease)
                .HasMaxLength(50)
                .HasColumnName("fRelease");
            entity.Property(e => e.FSupplierId).HasColumnName("fSupplierId");
            entity.Property(e => e.FTypeId).HasColumnName("fTypeId");

            entity.HasOne(d => d.FSupplier).WithMany(p => p.TIproducts)
                .HasForeignKey(d => d.FSupplierId)
                .HasConstraintName("FK_tIProducts_tCCompanyInfo");

            entity.HasOne(d => d.FType).WithMany(p => p.TIproducts)
                .HasForeignKey(d => d.FTypeId)
                .HasConstraintName("FK_tIProducts_tIType");
        });

        modelBuilder.Entity<TIproductReview>(entity =>
        {
            entity.HasKey(e => e.FId);

            entity.ToTable("tIProductReview");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FImagePath)
                .HasMaxLength(50)
                .HasColumnName("fImagePath");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberId");
            entity.Property(e => e.FProductId).HasColumnName("fProductId");
            entity.Property(e => e.FProductReview)
                .HasMaxLength(100)
                .HasColumnName("fProductReview");
            entity.Property(e => e.FProductScore).HasColumnName("fProductScore");
            entity.Property(e => e.FReviewDate)
                .HasMaxLength(50)
                .HasColumnName("fReviewDate");

            entity.HasOne(d => d.FProduct).WithMany(p => p.TIproductReviews)
                .HasForeignKey(d => d.FProductId)
                .HasConstraintName("FK_tIProductReview_tIProducts");
        });

        modelBuilder.Entity<TIproductSpec>(entity =>
        {
            entity.HasKey(e => e.FSpecId);

            entity.ToTable("tIProductSpec");

            entity.Property(e => e.FSpecId).HasColumnName("fSpecId");
            entity.Property(e => e.FBuyLimited).HasColumnName("fBuyLimited");
            entity.Property(e => e.FCost)
                .HasColumnType("money")
                .HasColumnName("fCost");
            entity.Property(e => e.FImagePath)
                .HasMaxLength(50)
                .HasColumnName("fImagePath");
            entity.Property(e => e.FLastModified)
                .HasMaxLength(50)
                .HasColumnName("fLastModified");
            entity.Property(e => e.FPrice)
                .HasColumnType("money")
                .HasColumnName("fPrice");
            entity.Property(e => e.FProductId).HasColumnName("fProductId");
            entity.Property(e => e.FSpecName)
                .HasMaxLength(50)
                .HasColumnName("fSpecName");
            entity.Property(e => e.FStockTime).HasColumnName("fStockTime");

            entity.HasOne(d => d.FProduct).WithMany(p => p.TIproductSpecs)
                .HasForeignKey(d => d.FProductId)
                .HasConstraintName("FK_tIProductSpec_tIProducts");
        });

        modelBuilder.Entity<TIshoppingCart>(entity =>
        {
            entity.HasKey(e => e.FShoppingCartId);

            entity.ToTable("tIShoppingCart");

            entity.Property(e => e.FShoppingCartId).HasColumnName("fShoppingCartId");
            entity.Property(e => e.FProductId).HasColumnName("fProductId");
            entity.Property(e => e.FQty).HasColumnName("fQty");
            entity.Property(e => e.FSpecId).HasColumnName("fSpecId");

            entity.HasOne(d => d.FProduct).WithMany(p => p.TIshoppingCarts)
                .HasForeignKey(d => d.FProductId)
                .HasConstraintName("FK_tIShoppingCart_tIProducts");

            entity.HasOne(d => d.FSpec).WithMany(p => p.TIshoppingCarts)
                .HasForeignKey(d => d.FSpecId)
                .HasConstraintName("FK_tIShoppingCart_tIProductSpec");
        });

        modelBuilder.Entity<TIsupplierLogistic>(entity =>
        {
            entity.HasKey(e => e.FId);

            entity.ToTable("tISupplierLogistic");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FLogisticsId).HasColumnName("fLogisticsId");
            entity.Property(e => e.FSupplierId).HasColumnName("fSupplierId");

            entity.HasOne(d => d.FLogistics).WithMany(p => p.TIsupplierLogistics)
                .HasForeignKey(d => d.FLogisticsId)
                .HasConstraintName("FK_tISupplierLogistic_tILogistics");

            entity.HasOne(d => d.FSupplier).WithMany(p => p.TIsupplierLogistics)
                .HasForeignKey(d => d.FSupplierId)
                .HasConstraintName("FK_tISupplierLogistic_tCCompanyInfo");
        });

        modelBuilder.Entity<TItype>(entity =>
        {
            entity.HasKey(e => e.FTypeId);

            entity.ToTable("tIType");

            entity.Property(e => e.FTypeId).HasColumnName("fTypeId");
            entity.Property(e => e.FType)
                .HasMaxLength(50)
                .HasColumnName("fType");
        });

        modelBuilder.Entity<TProductType>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("tproducttype_fid_primary");

            entity.ToTable("tProductType");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FTypeLetter)
                .HasMaxLength(50)
                .HasColumnName("fType_letter");
            entity.Property(e => e.FTypeName)
                .HasMaxLength(50)
                .HasColumnName("fType_name");
        });

        modelBuilder.Entity<TQuestion>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("tquestion_fid_primary");

            entity.ToTable("tQuestion");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FDate)
                .HasColumnType("date")
                .HasColumnName("fDate");
            entity.Property(e => e.FEmployeeId).HasColumnName("fEmployee_id");
            entity.Property(e => e.FMemberId).HasColumnName("fMember_id");
            entity.Property(e => e.FParentId).HasColumnName("fParent_id");
            entity.Property(e => e.FProductType).HasColumnName("fProduct_type");
            entity.Property(e => e.FStatus)
                .HasMaxLength(50)
                .HasColumnName("fStatus");
            entity.Property(e => e.FSubject)
                .HasMaxLength(300)
                .HasColumnName("fSubject");
            entity.Property(e => e.FType)
                .HasMaxLength(50)
                .HasColumnName("fType");

            entity.HasOne(d => d.FMember).WithMany(p => p.TQuestions)
                .HasForeignKey(d => d.FMemberId)
                .HasConstraintName("FK_tQuestion_tCustomer");

            entity.HasOne(d => d.FProductTypeNavigation).WithMany(p => p.TQuestions)
                .HasForeignKey(d => d.FProductType)
                .HasConstraintName("FK_tQuestion_tProductType");
        });

        modelBuilder.Entity<TRcarInfo>(entity =>
        {
            entity.HasKey(e => e.FCarId).HasName("PK_車輛資訊表");

            entity.ToTable("tRCarInfo");

            entity.Property(e => e.FCarId).HasColumnName("fCarId");
            entity.Property(e => e.FCompanyId).HasColumnName("fCompanyId");
            entity.Property(e => e.FLicensePlateNum)
                .HasMaxLength(50)
                .HasColumnName("fLicensePlateNum");
            entity.Property(e => e.FLocationId).HasColumnName("fLocationId");
            entity.Property(e => e.FModelId).HasColumnName("fModelId");
            entity.Property(e => e.FRentStatus).HasColumnName("fRentStatus");

            entity.HasOne(d => d.FCompany).WithMany(p => p.TRcarInfos)
                .HasForeignKey(d => d.FCompanyId)
                .HasConstraintName("FK_tRCarInfo_tCCompanyInfo");

            entity.HasOne(d => d.FLocation).WithMany(p => p.TRcarInfos)
                .HasForeignKey(d => d.FLocationId)
                .HasConstraintName("FK_tRCarInfo_tRServicePoint");

            entity.HasOne(d => d.FModel).WithMany(p => p.TRcarInfos)
                .HasForeignKey(d => d.FModelId)
                .HasConstraintName("FK_tCarInfo_tCarModel");
        });

        modelBuilder.Entity<TRcarModel>(entity =>
        {
            entity.HasKey(e => e.FModelId).HasName("PK_tCarModel_1");

            entity.ToTable("tRCarModel");

            entity.Property(e => e.FModelId).HasColumnName("fModelId");
            entity.Property(e => e.FImagePath)
                .HasMaxLength(50)
                .HasColumnName("fImagePath");
            entity.Property(e => e.FModelInUse).HasColumnName("fModelInUse");
            entity.Property(e => e.FModelName)
                .HasMaxLength(50)
                .HasColumnName("fModelName");
            entity.Property(e => e.FNumOfLuggage).HasColumnName("fNumOfLuggage");
            entity.Property(e => e.FNumOfPsgr).HasColumnName("fNumOfPsgr");
            entity.Property(e => e.FRentalFee)
                .HasColumnType("money")
                .HasColumnName("fRentalFee");
        });

        modelBuilder.Entity<TRcarRentOrder>(entity =>
        {
            entity.HasKey(e => e.FOrderId);

            entity.ToTable("tRCarRentOrder");

            entity.Property(e => e.FOrderId)
                .HasMaxLength(50)
                .HasDefaultValueSql("([dbo].[GetOrderID]())")
                .HasColumnName("fOrderId");
            entity.Property(e => e.FContractDocPath)
                .HasMaxLength(50)
                .HasColumnName("fContractDocPath");
            entity.Property(e => e.FCouponId).HasColumnName("fCouponId");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberId");
            entity.Property(e => e.FOrderDate)
                .HasMaxLength(50)
                .HasColumnName("fOrderDate");
            entity.Property(e => e.FOrderStatusId).HasColumnName("fOrderStatusId");
            entity.Property(e => e.FPaymentId).HasColumnName("fPaymentId");
            entity.Property(e => e.FPaymentStatusId).HasColumnName("fPaymentStatusId");

            entity.HasOne(d => d.FCoupon).WithMany(p => p.TRcarRentOrders)
                .HasForeignKey(d => d.FCouponId)
                .HasConstraintName("FK_tRCarRentOrder_tCouponList");

            entity.HasOne(d => d.FMember).WithMany(p => p.TRcarRentOrders)
                .HasForeignKey(d => d.FMemberId)
                .HasConstraintName("FK_tRCarRentOrder_tCustomer");

            entity.HasOne(d => d.FOrderStatus).WithMany(p => p.TRcarRentOrders)
                .HasForeignKey(d => d.FOrderStatusId)
                .HasConstraintName("FK_tCarRentOrder_tOrderStatus");

            entity.HasOne(d => d.FPayment).WithMany(p => p.TRcarRentOrders)
                .HasForeignKey(d => d.FPaymentId)
                .HasConstraintName("FK_tCarRentOrder_tPaymentMethod");

            entity.HasOne(d => d.FPaymentNavigation).WithMany(p => p.TRcarRentOrders)
                .HasForeignKey(d => d.FPaymentId)
                .HasConstraintName("FK_tCarRentOrder_tPaymentStatus");
        });

        modelBuilder.Entity<TRcarRentOrderDetail>(entity =>
        {
            entity.HasKey(e => e.FOrderDetailId).HasName("PK_租賃訂單明細表");

            entity.ToTable("tRCarRentOrderDetail");

            entity.Property(e => e.FOrderDetailId).HasColumnName("fOrderDetailId");
            entity.Property(e => e.FCarId).HasColumnName("fCarId");
            entity.Property(e => e.FDriverId).HasColumnName("fDriverId");
            entity.Property(e => e.FDropLocId).HasColumnName("fDropLocId");
            entity.Property(e => e.FFromDateTime)
                .HasColumnType("datetime")
                .HasColumnName("fFromDateTime");
            entity.Property(e => e.FOrderId)
                .HasMaxLength(50)
                .HasColumnName("fOrderId");
            entity.Property(e => e.FPrice)
                .HasColumnType("money")
                .HasColumnName("fPrice");
            entity.Property(e => e.FRentDateTime)
                .HasColumnType("datetime")
                .HasColumnName("fRentDateTime");

            entity.HasOne(d => d.FCar).WithMany(p => p.TRcarRentOrderDetails)
                .HasForeignKey(d => d.FCarId)
                .HasConstraintName("FK_tCarRentOrderDetail_tCarInfo");

            entity.HasOne(d => d.FDriver).WithMany(p => p.TRcarRentOrderDetails)
                .HasForeignKey(d => d.FDriverId)
                .HasConstraintName("FK_tRCarRentOrderDetail_tRDriverInfo");

            entity.HasOne(d => d.FDropLoc).WithMany(p => p.TRcarRentOrderDetails)
                .HasForeignKey(d => d.FDropLocId)
                .HasConstraintName("FK_tCarRentOrderDetail_tServicePoint1");

            entity.HasOne(d => d.FOrder).WithMany(p => p.TRcarRentOrderDetails)
                .HasForeignKey(d => d.FOrderId)
                .HasConstraintName("FK_tRCarRentOrderDetail_tRCarRentOrder");
        });

        modelBuilder.Entity<TRdriverInfo>(entity =>
        {
            entity.HasKey(e => e.FDriverId);

            entity.ToTable("tRDriverInfo");

            entity.Property(e => e.FDriverId).HasColumnName("fDriverId");
            entity.Property(e => e.FId)
                .HasMaxLength(50)
                .HasColumnName("fId");
            entity.Property(e => e.FLicenseImagePath)
                .HasMaxLength(50)
                .HasColumnName("fLicenseImagePath");
            entity.Property(e => e.FName)
                .HasMaxLength(50)
                .HasColumnName("fName");
            entity.Property(e => e.FPhone)
                .HasMaxLength(50)
                .HasColumnName("fPhone");
        });

        modelBuilder.Entity<TRorderStatus>(entity =>
        {
            entity.HasKey(e => e.FOrderStatusId).HasName("PK_tOrderStatus");

            entity.ToTable("tROrderStatus");

            entity.Property(e => e.FOrderStatusId).HasColumnName("fOrderStatusId");
            entity.Property(e => e.FOrderStatus)
                .HasMaxLength(50)
                .HasColumnName("fOrderStatus");
        });

        modelBuilder.Entity<TRpaymentMethod>(entity =>
        {
            entity.HasKey(e => e.FPaymentId).HasName("PK_tPaymentMethod");

            entity.ToTable("tRPaymentMethod");

            entity.Property(e => e.FPaymentId).HasColumnName("fPaymentId");
            entity.Property(e => e.FPayment)
                .HasMaxLength(50)
                .HasColumnName("fPayment");
        });

        modelBuilder.Entity<TRpaymentStatus>(entity =>
        {
            entity.HasKey(e => e.FPaymentStatusId).HasName("PK_tPaymentStatus");

            entity.ToTable("tRPaymentStatus");

            entity.Property(e => e.FPaymentStatusId).HasColumnName("fPaymentStatusId");
            entity.Property(e => e.FPaymentStatus)
                .HasMaxLength(50)
                .HasColumnName("fPaymentStatus");
        });

        modelBuilder.Entity<TRservicePoint>(entity =>
        {
            entity.HasKey(e => e.FServicePointId).HasName("PK_租車據點總表");

            entity.ToTable("tRServicePoint");

            entity.Property(e => e.FServicePointId).HasColumnName("fServicePointId");
            entity.Property(e => e.FAddress)
                .HasMaxLength(50)
                .HasColumnName("fAddress");
            entity.Property(e => e.FPhone)
                .HasMaxLength(50)
                .HasColumnName("fPhone");
            entity.Property(e => e.FServicePoint)
                .HasMaxLength(50)
                .HasColumnName("fServicePoint");
            entity.Property(e => e.FServicePointInUse).HasColumnName("fServicePointInUse");
        });

        modelBuilder.Entity<TVcountry>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK_旅遊代辦國家總表");

            entity.ToTable("tVCountry");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FCountry)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fCountry");
            entity.Property(e => e.FRegion)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fRegion");
        });

        modelBuilder.Entity<TVformPath>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK_旅遊代辦申請資料");

            entity.ToTable("tVFormPath");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FFormName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fFormName");
            entity.Property(e => e.FFormPath).HasColumnName("fFormPath");
        });

        modelBuilder.Entity<TVlengthOfStay>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK_旅遊代辦可停留天數總表");

            entity.ToTable("tVLengthOfStay");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FLengthOfStay)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fLengthOfStay");
        });

        modelBuilder.Entity<TVorder>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK_旅遊代辦訂單資料");

            entity.ToTable("tVOrder");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FCouponId).HasColumnName("fCouponId");
            entity.Property(e => e.FCustomerId).HasColumnName("fCustomerId");
            entity.Property(e => e.FDepartureDate)
                .HasMaxLength(50)
                .HasColumnName("fDepartureDate");
            entity.Property(e => e.FEvaluate).HasColumnName("fEvaluate");
            entity.Property(e => e.FForPickupOrDeliveryAddress)
                .HasMaxLength(50)
                .HasColumnName("fForPickupOrDeliveryAddress");
            entity.Property(e => e.FInterviewReminder).HasColumnName("fInterviewReminder");
            entity.Property(e => e.FMemo)
                .HasMaxLength(50)
                .HasColumnName("fMemo");
            entity.Property(e => e.FOrderId)
                .HasMaxLength(50)
                .HasDefaultValueSql("([dbo].[GetOrderID_V]())")
                .HasColumnName("fOrderId");
            entity.Property(e => e.FPrice)
                .HasColumnType("money")
                .HasColumnName("fPrice");
            entity.Property(e => e.FProductId).HasColumnName("fProductId");
            entity.Property(e => e.FQuantity).HasColumnName("fQuantity");
            entity.Property(e => e.FStatusId).HasColumnName("fStatusId");

            entity.HasOne(d => d.FCoupon).WithMany(p => p.TVorders)
                .HasForeignKey(d => d.FCouponId)
                .HasConstraintName("FK_tVOrder_tCouponList");

            entity.HasOne(d => d.FCustomer).WithMany(p => p.TVorders)
                .HasForeignKey(d => d.FCustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tVOrder_tCustomer");

            entity.HasOne(d => d.FProduct).WithMany(p => p.TVorders)
                .HasForeignKey(d => d.FProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_旅遊代辦訂單資料_旅遊代辦子商品資料");

            entity.HasOne(d => d.FStatus).WithMany(p => p.TVorders)
                .HasForeignKey(d => d.FStatusId)
                .HasConstraintName("FK_tVOrder_tVOrderStatus");
        });

        modelBuilder.Entity<TVorderStatus>(entity =>
        {
            entity.HasKey(e => e.FId);

            entity.ToTable("tVOrderStatus");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FVorderStatus)
                .HasMaxLength(50)
                .HasColumnName("fVOrderStatus");
        });

        modelBuilder.Entity<TVprocessingTime>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK_旅遊代辦辦理耗時總表");

            entity.ToTable("tVProcessingTime");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FProcessingTime).HasColumnName("fProcessingTime");
        });

        modelBuilder.Entity<TVproduct>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK_旅遊代辦子商品資料");

            entity.ToTable("tVProduct");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FCountryId).HasColumnName("fCountryId");
            entity.Property(e => e.FEnabled).HasColumnName("fEnabled");
            entity.Property(e => e.FEntityOrElectronic).HasColumnName("fEntityOrElectronic");
            entity.Property(e => e.FInterviewRequirement).HasColumnName("fInterviewRequirement");
            entity.Property(e => e.FLengthOfStayId).HasColumnName("fLengthOfStayId");
            entity.Property(e => e.FName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fName");
            entity.Property(e => e.FNewOrLost).HasColumnName("fNewOrLost");
            entity.Property(e => e.FPrice)
                .HasColumnType("money")
                .HasColumnName("fPrice");
            entity.Property(e => e.FProcessingTimeId).HasColumnName("fProcessingTimeId");
            entity.Property(e => e.FSupplierId).HasColumnName("fSupplierId");
            entity.Property(e => e.FValidityPeriodId).HasColumnName("fValidityPeriodId");

            entity.HasOne(d => d.FCountry).WithMany(p => p.TVproducts)
                .HasForeignKey(d => d.FCountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tVProduct_tVCountry");

            entity.HasOne(d => d.FLengthOfStay).WithMany(p => p.TVproducts)
                .HasForeignKey(d => d.FLengthOfStayId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_旅遊代辦子商品資料_旅遊代辦可停留天數總表");

            entity.HasOne(d => d.FProcessingTime).WithMany(p => p.TVproducts)
                .HasForeignKey(d => d.FProcessingTimeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_旅遊代辦價目表_旅遊代辦辦理耗時總表");

            entity.HasOne(d => d.FSupplier).WithMany(p => p.TVproducts)
                .HasForeignKey(d => d.FSupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tVProduct_廠商基本資料");

            entity.HasOne(d => d.FValidityPeriod).WithMany(p => p.TVproducts)
                .HasForeignKey(d => d.FValidityPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_旅遊代辦價目表_旅遊代辦效期時間總表");
        });

        modelBuilder.Entity<TVproductFormsRequired>(entity =>
        {
            entity.HasKey(e => e.FId);

            entity.ToTable("tVProductFormsRequired");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FFormId).HasColumnName("fFormId");
            entity.Property(e => e.FProductId).HasColumnName("fProductId");

            entity.HasOne(d => d.FForm).WithMany(p => p.TVproductFormsRequireds)
                .HasForeignKey(d => d.FFormId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_旅遊代辦子商品所需申請資料_旅遊代辦申請資料");

            entity.HasOne(d => d.FProduct).WithMany(p => p.TVproductFormsRequireds)
                .HasForeignKey(d => d.FProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_旅遊代辦子商品所需申請資料_旅遊代辦子商品資料");
        });

        modelBuilder.Entity<TVtravelerInfo>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK_旅客資料");

            entity.ToTable("tVTravelerInfo");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FBirthDate)
                .HasMaxLength(50)
                .HasColumnName("fBirthDate");
            entity.Property(e => e.FGender).HasColumnName("fGender");
            entity.Property(e => e.FName)
                .HasMaxLength(50)
                .HasColumnName("fName");
            entity.Property(e => e.FOrderId).HasColumnName("fOrderId");

            entity.HasOne(d => d.FOrder).WithMany(p => p.TVtravelerInfos)
                .HasForeignKey(d => d.FOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tVTravelerInfo_tVOrder1");
        });

        modelBuilder.Entity<TVvalidityPeriod>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK_旅遊代辦效期時間總表");

            entity.ToTable("tVValidityPeriod");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FValidityPeriod)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fValidityPeriod");
        });

        modelBuilder.Entity<Tdestination>(entity =>
        {
            entity.HasKey(e => e.FdestinationId).HasName("PK_FDestinationId");

            entity.ToTable("TDestination");

            entity.Property(e => e.FdestinationId)
                .HasMaxLength(50)
                .HasColumnName("FDestinationId");
            entity.Property(e => e.Faddress)
                .HasMaxLength(500)
                .HasColumnName("FAddress");
            entity.Property(e => e.FareaId).HasColumnName("FAreaId");
            entity.Property(e => e.FdestinationContent)
                .HasMaxLength(500)
                .HasColumnName("FDestinationContent");
            entity.Property(e => e.FdestinationName)
                .HasMaxLength(50)
                .HasColumnName("FDestinationName");
            entity.Property(e => e.FdestinationTypeId).HasColumnName("FDestinationTypeId");
            entity.Property(e => e.Fid)
                .ValueGeneratedOnAdd()
                .HasColumnName("FId");
            entity.Property(e => e.Fprice).HasColumnName("FPrice");
            entity.Property(e => e.Fstate).HasColumnName("FState");
            entity.Property(e => e.Fstock).HasColumnName("FStock");

            entity.HasOne(d => d.Farea).WithMany(p => p.Tdestinations)
                .HasForeignKey(d => d.FareaId)
                .HasConstraintName("FK_TDestination_TTravelArea");

            entity.HasOne(d => d.FdestinationType).WithMany(p => p.Tdestinations)
                .HasForeignKey(d => d.FdestinationTypeId)
                .HasConstraintName("FK_TDestination_TType");
        });

        modelBuilder.Entity<TdestinationDetail>(entity =>
        {
            entity.HasKey(e => e.FdestinationDetailId).HasName("PK_FDestinationDetailId");

            entity.ToTable("TDestinationDetail");

            entity.Property(e => e.FdestinationDetailId).HasColumnName("FDestinationDetailId");
            entity.Property(e => e.FdestinationId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("FDestinationId");
            entity.Property(e => e.FtravelId)
                .HasMaxLength(50)
                .HasColumnName("FTravelId");

            entity.HasOne(d => d.Fdestination).WithMany(p => p.TdestinationDetails)
                .HasForeignKey(d => d.FdestinationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TDestinationDetail_TDestination");

            entity.HasOne(d => d.Ftravel).WithMany(p => p.TdestinationDetails)
                .HasForeignKey(d => d.FtravelId)
                .HasConstraintName("FK_TDestinationDetail_TTravelPlan");
        });

        modelBuilder.Entity<TdestinationOrder>(entity =>
        {
            entity.HasKey(e => e.ForderId);

            entity.ToTable("TDestinationOrder");

            entity.Property(e => e.ForderId)
                .HasMaxLength(50)
                .HasColumnName("FOrderId");
            entity.Property(e => e.Fcoupomid).HasColumnName("FCoupomid");
            entity.Property(e => e.FdestinationId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("FDestinationId");
            entity.Property(e => e.Fid).ValueGeneratedOnAdd();
            entity.Property(e => e.FmemberId).HasColumnName("FMemberId");
            entity.Property(e => e.ForderDate)
                .HasMaxLength(50)
                .HasColumnName("FOrderDate");
            entity.Property(e => e.ForderState)
                .HasMaxLength(50)
                .HasColumnName("FOrderState");
            entity.Property(e => e.FpayMethod)
                .HasMaxLength(50)
                .HasColumnName("FPayMethod");
            entity.Property(e => e.FpayState)
                .HasMaxLength(50)
                .HasColumnName("FPayState");
            entity.Property(e => e.Fprice)
                .HasColumnType("money")
                .HasColumnName("FPrice");
            entity.Property(e => e.Fqty).HasColumnName("FQty");

            entity.HasOne(d => d.Fcoupom).WithMany(p => p.TdestinationOrders)
                .HasForeignKey(d => d.Fcoupomid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TDestinationOrder_tCouponList");

            entity.HasOne(d => d.Fdestination).WithMany(p => p.TdestinationOrders)
                .HasForeignKey(d => d.FdestinationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TDestinationOrder_TDestination");

            entity.HasOne(d => d.Fmember).WithMany(p => p.TdestinationOrders)
                .HasForeignKey(d => d.FmemberId)
                .HasConstraintName("FK_TDestinationOrder_tCustomer");
        });

        modelBuilder.Entity<TdestinationPhoto>(entity =>
        {
            entity.HasKey(e => e.FphotoId).HasName("PK_景點圖片庫");

            entity.ToTable("TDestinationPhoto");

            entity.Property(e => e.FphotoId).HasColumnName("FPhotoId");
            entity.Property(e => e.FdestinationId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("FDestinationId");
            entity.Property(e => e.FphotoPath)
                .HasMaxLength(50)
                .HasColumnName("FPhotoPath");

            entity.HasOne(d => d.Fdestination).WithMany(p => p.TdestinationPhotos)
                .HasForeignKey(d => d.FdestinationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TDestinationPhoto_TDestination");
        });

        modelBuilder.Entity<TdestinationRemark>(entity =>
        {
            entity.HasKey(e => e.FremarkId);

            entity.ToTable("TDestinationRemark");

            entity.Property(e => e.FremarkId)
                .HasMaxLength(50)
                .HasColumnName("FRemarkId");
            entity.Property(e => e.Fid)
                .ValueGeneratedOnAdd()
                .HasColumnName("FId");
            entity.Property(e => e.ForderId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("FOrderId");
            entity.Property(e => e.Fremark)
                .HasMaxLength(500)
                .HasColumnName("FRemark");

            entity.HasOne(d => d.Forder).WithMany(p => p.TdestinationRemarks)
                .HasForeignKey(d => d.ForderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TDestinationRemark_TDestinationOrder");
        });

        modelBuilder.Entity<ThotelDetail>(entity =>
        {
            entity.HasKey(e => e.FhotelDetailId).HasName("PK_TravelStayDetailId");

            entity.ToTable("THotelDetail");

            entity.Property(e => e.FhotelDetailId).HasColumnName("FHotelDetailId");
            entity.Property(e => e.FhotelId).HasColumnName("FHotelId");
            entity.Property(e => e.FtravelId)
                .HasMaxLength(50)
                .HasColumnName("FTravelId");

            entity.HasOne(d => d.Ftravel).WithMany(p => p.ThotelDetails)
                .HasForeignKey(d => d.FtravelId)
                .HasConstraintName("FK_THotelDetail_TTravelPlan");
        });

        modelBuilder.Entity<TplanRemark>(entity =>
        {
            entity.HasKey(e => e.FremarkId).HasName("PK_TTravelPlanRemark");

            entity.ToTable("TPlanRemark");

            entity.Property(e => e.FremarkId)
                .HasMaxLength(50)
                .HasColumnName("FRemarkId");
            entity.Property(e => e.Fid)
                .ValueGeneratedOnAdd()
                .HasColumnName("FId");
            entity.Property(e => e.ForderId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("FOrderId");
            entity.Property(e => e.Fremark)
                .HasMaxLength(500)
                .HasColumnName("FRemark");

            entity.HasOne(d => d.Forder).WithMany(p => p.TplanRemarks)
                .HasForeignKey(d => d.ForderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TPlanRemark_TTravelOrder");
        });

        modelBuilder.Entity<TtravelArea>(entity =>
        {
            entity.HasKey(e => e.FareaId);

            entity.ToTable("TTravelArea");

            entity.Property(e => e.FareaId).HasColumnName("FAreaId");
            entity.Property(e => e.FareaName)
                .HasMaxLength(10)
                .HasColumnName("FAreaName");
        });

        modelBuilder.Entity<TtravelOrder>(entity =>
        {
            entity.HasKey(e => e.ForderId);

            entity.ToTable("TTravelOrder");

            entity.Property(e => e.ForderId)
                .HasMaxLength(50)
                .HasColumnName("FOrderId");
            entity.Property(e => e.Fcoupomid).HasColumnName("FCoupomid");
            entity.Property(e => e.Fid).ValueGeneratedOnAdd();
            entity.Property(e => e.FmemberId).HasColumnName("FMemberId");
            entity.Property(e => e.ForderDate)
                .HasMaxLength(50)
                .HasColumnName("FOrderDate");
            entity.Property(e => e.ForderState)
                .HasMaxLength(50)
                .HasColumnName("FOrderState");
            entity.Property(e => e.FpayMethod)
                .HasMaxLength(50)
                .HasColumnName("FPayMethod");
            entity.Property(e => e.FpayState)
                .HasMaxLength(50)
                .HasColumnName("FPayState");
            entity.Property(e => e.FplanId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("FPlanId");
            entity.Property(e => e.Fprice)
                .HasColumnType("money")
                .HasColumnName("FPrice");
            entity.Property(e => e.Fqty).HasColumnName("FQty");

            entity.HasOne(d => d.Fcoupom).WithMany(p => p.TtravelOrders)
                .HasForeignKey(d => d.Fcoupomid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TTravelOrder_tCouponList");

            entity.HasOne(d => d.Fmember).WithMany(p => p.TtravelOrders)
                .HasForeignKey(d => d.FmemberId)
                .HasConstraintName("FK_TTravelOrder_tCustomer");

            entity.HasOne(d => d.Fplan).WithMany(p => p.TtravelOrders)
                .HasForeignKey(d => d.FplanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TTravelOrder_TTravelPlan");
        });

        modelBuilder.Entity<TtravelPlan>(entity =>
        {
            entity.HasKey(e => e.FtravelId).HasName("PK_FTravelId");

            entity.ToTable("TTravelPlan");

            entity.Property(e => e.FtravelId)
                .HasMaxLength(50)
                .HasColumnName("FTravelId");
            entity.Property(e => e.FareaId).HasColumnName("FAreaId");
            entity.Property(e => e.Fday).HasColumnName("FDay");
            entity.Property(e => e.Fid).HasColumnName("FId");
            entity.Property(e => e.Fprice).HasColumnName("FPrice");
            entity.Property(e => e.Fstate).HasColumnName("FState");
            entity.Property(e => e.Fstock).HasColumnName("FStock");
            entity.Property(e => e.Ftransport)
                .HasMaxLength(50)
                .HasColumnName("FTransport");
            entity.Property(e => e.FtravelContent)
                .HasMaxLength(500)
                .HasColumnName("FTravelContent");
            entity.Property(e => e.FtravelName)
                .HasMaxLength(50)
                .HasColumnName("FTravelName");
            entity.Property(e => e.FtravelTypeId).HasColumnName("FTravelTypeId");

            entity.HasOne(d => d.Farea).WithMany(p => p.TtravelPlans)
                .HasForeignKey(d => d.FareaId)
                .HasConstraintName("FK_TTravelPlan_TTravelArea");

            entity.HasOne(d => d.FtravelType).WithMany(p => p.TtravelPlans)
                .HasForeignKey(d => d.FtravelTypeId)
                .HasConstraintName("FK_TTravelPlan_TType");
        });

        modelBuilder.Entity<Ttype>(entity =>
        {
            entity.HasKey(e => e.FtypeId).HasName("PK_TTravelType");

            entity.ToTable("TType");

            entity.Property(e => e.FtypeId).HasColumnName("FTypeId");
            entity.Property(e => e.Ftype)
                .HasMaxLength(50)
                .HasColumnName("FType");
        });

        modelBuilder.Entity<VHotelOrderDetailView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vHotelOrderDetailView");

            entity.Property(e => e.FHotelOrderDetailId).HasColumnName("fHotelOrderDetailId");
            entity.Property(e => e.FHotelOrderId)
                .HasMaxLength(50)
                .HasColumnName("fHotelOrderId");
            entity.Property(e => e.FRoomNumber)
                .HasMaxLength(50)
                .HasColumnName("fRoomNumber");
        });

        modelBuilder.Entity<VHotelOrderView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vHotelOrderView");

            entity.Property(e => e.付款方式).HasMaxLength(50);
            entity.Property(e => e.付款日期).HasMaxLength(50);
            entity.Property(e => e.付款狀態).HasMaxLength(50);
            entity.Property(e => e.優惠券名稱).HasMaxLength(50);
            entity.Property(e => e.入住時間).HasMaxLength(50);
            entity.Property(e => e.原始金額).HasColumnType("money");
            entity.Property(e => e.房型名稱).HasMaxLength(50);
            entity.Property(e => e.目前金額).HasColumnType("money");
            entity.Property(e => e.總金額).HasColumnType("money");
            entity.Property(e => e.訂單日期).HasMaxLength(50);
            entity.Property(e => e.訂單編號)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.退房時間).HasMaxLength(50);
            entity.Property(e => e.顧客姓名).HasMaxLength(50);
            entity.Property(e => e.飯店名稱).HasMaxLength(50);
        });

        modelBuilder.Entity<VHotelView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vHotelView");

            entity.Property(e => e.FHotelId).HasColumnName("fHotelId");
            entity.Property(e => e.地區).HasMaxLength(50);
            entity.Property(e => e.地址).HasMaxLength(50);
            entity.Property(e => e.統編).HasMaxLength(50);
            entity.Property(e => e.電話).HasMaxLength(50);
            entity.Property(e => e.飯店中文名稱).HasMaxLength(50);
            entity.Property(e => e.飯店英文名稱).HasMaxLength(50);
        });

        modelBuilder.Entity<VRoomTypeView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vRoomTypeView");

            entity.Property(e => e.FRoomTypeId).HasColumnName("fRoomTypeId");
            entity.Property(e => e.床型).HasMaxLength(50);
            entity.Property(e => e.房型名稱).HasMaxLength(50);
            entity.Property(e => e.手機).HasColumnType("money");
        });

        modelBuilder.Entity<VVorderView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVOrderView");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.備註).HasMaxLength(50);
            entity.Property(e => e.優惠券).HasMaxLength(50);
            entity.Property(e => e.商品名稱)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.單價).HasColumnType("money");
            entity.Property(e => e.客戶名稱).HasMaxLength(50);
            entity.Property(e => e.廠商).HasMaxLength(50);
            entity.Property(e => e.折扣金額).HasColumnType("money");
            entity.Property(e => e.編號).HasMaxLength(50);
            entity.Property(e => e.總價).HasColumnType("money");
            entity.Property(e => e.自取或配送).HasMaxLength(50);
            entity.Property(e => e.訂單日期).HasMaxLength(10);
            entity.Property(e => e.訂單狀態).HasMaxLength(50);
            entity.Property(e => e.預計出國日期).HasMaxLength(50);
        });

        modelBuilder.Entity<VVproductView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vVProductView");

            entity.Property(e => e.價格).HasColumnType("money");
            entity.Property(e => e.可留天數)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.商品名稱)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.國家)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.地區)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.廠商).HasMaxLength(50);
            entity.Property(e => e.效期)
                .IsRequired()
                .HasMaxLength(50);
        });

        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}